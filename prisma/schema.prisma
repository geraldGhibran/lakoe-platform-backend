generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  phone       Int        @default(0)
  password    String
  role        roleEnum   @default(SELLER)
  location    Locations? @relation(fields: [locationsId], references: [id])
  store       Store?
  locationsId Int?
}

enum RoleEnum {
  ADMIN
  SELLER
}

model Locations {
  id               Int     @id @default(autoincrement())
  name             String
  address          String
  postal_code      Int
  city_district    Int
  latitude         Int
  longitude        Int
  store_id         Int
  store            Store   @relation(fields: [store_id], references: [id])
  is_main_location Boolean
  User             User[]
}

model Store {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  slogan           String?
  description      String?
  logo_img         String?
  banner_img       String?
  Locations        Locations[]
  bankAccount      bankAccount?
  products         Product[]
  user_id          Int                @unique
  user             User               @relation(fields: [user_id], references: [id])
  template_Message Template_Message[]
  amount           Int                @default(0)
}

enum roleEnum {
  ADMIN
  SELLER
}

model bankAccount {
  id         Int    @id @default(autoincrement())
  bank       String
  acc_number Int
  acc_name   String
  store_id   Int    @unique
  store      Store  @relation(fields: [store_id], references: [id])
}

model Invoices {
  id                 Int           @id @default(autoincrement())
  price              Int
  service_charge     Int
  status             StatusInvoice
  receiver_longitude Int
  receiver_latitude  Int
  receiver_district  String
  receiver_phone     Int
  receiver_address   String
  receiver_name      String
  invoice_number     String
  payment_id         Int
  courier_id         Int
  Payments           Payments?
  Courier            Courier?
  Prouduct           Product[]
}

model Payments {
  id         Int           @id @default(autoincrement())
  bank       String
  amount     Int
  status     StatusPayment
  invoice_id Int           @unique
  invoice    Invoices      @relation(fields: [invoice_id], references: [id])
}

model Courier {
  id                   Int      @id @default(autoincrement())
  courier_code         String
  courier_service_name String
  courier_service_code String
  price                Int
  invoice_id           Int      @unique
  invoice              Invoices @relation(fields: [invoice_id], references: [id])
}

model Product {
  id                  Int         @id @default(autoincrement())
  name                String
  description         String
  image               Images[]
  price               Int
  isActive            Boolean
  variants_id         Int?
  variant             Variant[]
  minimum_order       Int
  categories          Categories? @relation(fields: [categories_id], references: [id])
  categories_id       Int
  Store               Store?      @relation(fields: [store_id], references: [id])
  store_id            Int?
  url                 String
  variant_combination String[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now())
  Invoices            Invoices?   @relation(fields: [invoicesId], references: [id])
  invoicesId          Int?
}

model Images {
  id         Int     @id @default(autoincrement())
  url        String
  product_id Int
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Variant {
  id Int @id @default(autoincrement())

  name          String
  variant_items Variant_Item[]
  isActive      Boolean
  product_id    Int
  product       Product?       @relation(fields: [product_id], references: [id])
}

model Variant_Item {
  id         Int     @id @default(autoincrement())
  image      String?
  title      String
  weight     Int
  price      Int
  variant_id Int
  variant    Variant @relation(fields: [variant_id], references: [id])
  stock      Int
}

enum StatusPayment {
  PENDING
  SUCCESS
  FAILED
}

enum StatusInvoice {
  PAID
  UNPAID
  PENDING
}

model Categories {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]
}

model Withdraw {
  id     Int @id @default(autoincrement())
  amount Int
}

model Template_Message {
  id      Int    @id @default(autoincrement())
  title   String
  message String

  Store   Store? @relation(fields: [storeId], references: [id])
  storeId Int?
}
